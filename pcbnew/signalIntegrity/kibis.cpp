#include "kibis.h"
#include "ibis2kibis.h"

bool KibisFromFile( wxString aFileName, std::vector<KIBIS_COMPONENT*>* aDest )
{
    IbisParser* parser = new IbisParser();
    IbisFile*   file = new IbisFile();
    parser->m_parrot = true;
    parser->parseFile( wxFileName( aFileName ), file );
    convertKibisAll( parser, aDest );

    return true;
}


KIBIS_PIN* KIBIS_COMPONENT::getPin( wxString aPinNumber )
{
    for( KIBIS_PIN* pin : m_pins )
    {
        if( pin->m_pinNumber == aPinNumber )
        {
            return pin;
        }
    }

    return nullptr;
}

bool KIBIS_MODEL::writeSpiceDriver( wxString* aDest )
{
    double   ton = 20e-9;
    double   toff = 60e-9;
    bool     status = true;

    wxString result;

    result = "\n";
    result += "CCPOMP DIE GND ";
    result << m_C_comp.typ;
    result += "\n";
    result += "vin DIE GND pwl ( ";

    double lastT;
    for( auto entry : m_risingWaveforms.at( 0 )->m_table.m_entries )
    {
        lastT = entry.t;
        if( ton > entry.t )
        {
            result << entry.t;
            result += " ";
            result << entry.V.typ;
            result += " ";
        }
        else
        {
            std::cout << "WARNING: t_on is smaller than rising waveform. " << std::endl;
            break;
        }
    }
    for( auto entry : m_fallingWaveforms.at( 1 )->m_table.m_entries )
    {
        if( toff > entry.t )
        {
            result << entry.t + ton;
            result += " ";
            result << entry.V.typ;
            result += " ";
        }
        else
        {
            std::cout << "WARNING: t_off is smaller than falling waveform. " << std::endl;
            break;
        }
    }
    result += ") \n";

    *aDest = result;

    return status;
}
bool KIBIS_PIN::writeSpiceDriver( wxString* aDest, KIBIS_MODEL* aModel )
{
    wxString result;
    wxString tmp;

    result += "\n";
    result = "*Model generated by Kicad using Ibis data. ";
    result += "\n.SUBCKT DRIVER POWER GND OUT \n"; // 1: POWER, 2:GND, 3:OUT
    result += "\n";

    result += "RPIN 1 OUT ";
    result << R_pin.typ;
    result += "\n";
    result += "LPIN DIE 1 ";
    result << L_pin.typ;
    result += "\n";
    result += "CPIN OUT GND ";
    result << C_pin.typ;
    result += "\n";

    aModel->writeSpiceDriver( &tmp );

    result += tmp;
    result += ".ENDS DRIVER\n\n";

    *aDest = result;
    std::cout << result << std::endl;

    return true;
}